#include "stm32f37x.h"
#include "sdadc.h"
#include "adc.h"
#include "uart.h"
#include "systick.h"
#include "stm32f37x_it.h"
#include <stdio.h>
#include "exit.h"
#include "time.h"

//extern void USART_Configuration(void);
/**
  * @brief  Main program.
  * @param  None
  * @retval None
  */
//extern uint8_t battery;
//extern uint8_t start;
void send_data(unsigned char *p)
{
    int m, u = 0;
    unsigned char C[127] = {0};
    for(u = 0; u < 10; u++)
    {
        for(m = 0; m < 127; m++)
        {
            C[m] = p[u * 127 + m];
        }
        UART_Send(C, 127);
        Delay_ms(2);
    }
    for(m = 0; m < 126; m++)
    {
        C[m] = p[1270 + m];
    }
    C[126] = 0XFF;
    UART_Send(C, 127);
}
int main(void)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
    SystemInit();
    Systick_Init();
    USART_Configuration();
	

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOE, &GPIO_InitStruct);
    GPIO_ResetBits(GPIOE, GPIO_Pin_3);

	
    /* POT_SDADC channel1P (in Single Ended Zero Reference mode) configuration using
       injected conversion with continuous mode enabled */

    if(SDADC1_Config() != 0)//初始化sdadc
    {
        /* Forever loop */
        while(1);
    }
    else
    {
			 TIM3_Int_Init(36000 - 1, 0);	//定时器溢出时间计算方法:Tout=((arr+1)*(psc+1))/72M=30000hz us.
        //EXIT_IO_Init();//等待开始采集指令     
			  TIM_Cmd(TIM3, ENABLE); //使能定时器3

/* Infinite loop */
        while (1){
       					  if(start==1)
             {
//							  GPIO_ResetBits(GPIOD, GPIO_Pin_7);
					      //UART_Send(B,1396);
      				 send_data(B);
//							 GPIO_SetBits(GPIOD, GPIO_Pin_7);
						    start=0;
						  }
						  if(stamp_cnt==10)
        {
					
        //UART_send_byte(0x99);
        //regress
						//补偿
				}
        }
    }
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
